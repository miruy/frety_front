name: deploy!!

on:
  push:
    branches:
      - main

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CI: false
    strategy:
      matrix:
        node-version: [ 21.x ]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Copy .env.production.sample to .env.production
        run: cp .env.production.sample .env.production
      - run: npm i
      - run: |
          export NODE_OPTIONS=--max_old_space_size=4096
          npm run build
      - run: |
          ls -la
      - name: .next 저장
        uses: actions/upload-artifact@v4
        with:
          name: next
          path: .next/
          include-hidden-files: true
      - name: .next 저장
        uses: actions/upload-artifact@v4
        with:
          name: public
          path: public/

  tag:
    outputs:
      tag_name: ${{ steps.tag_version.outputs.new_tag }}
      release_name: Release ${{ steps.tag_version.outputs.new_tag }}
      body: ${{ steps.tag_version.outputs.changelog }}
    name: 태그 생성
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
  docker:
    name: 도커 이미지 빌드와 푸시
    runs-on: ubuntu-latest
    needs: tag
    steps:
      - uses: actions/checkout@v3
      - name: .next 가져오기
        uses: actions/download-artifact@v4
        with:
          name: next
          path: .next
      - name: .next 가져오기
        uses: actions/download-artifact@v4
        with:
          name: public
          path: public
      - name: .next 디렉토리 확인
        run: |
          ls -la

      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: miruy
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          file: Dockerfile
          context: .
          push: true
          tags: |
            ghcr.io/miruy/frety-frontend:${{ needs.tag.outputs.tag_name }}
            ghcr.io/miruy/frety-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
  release:
    name: release 생성
    runs-on: ubuntu-latest
    needs: [ docker, tag ]
    steps:
      - uses: actions/checkout@v3
      - name: Create a GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.tag.outputs.tag_name }}
          release_name: ${{ needs.tag.outputs.release_name }}
          body: ${{ needs.tag.outputs.body }}
  deploy:
    name: 배포
    runs-on: ubuntu-latest
    needs: [ docker, tag, release ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.INSTANE_ID }}
          working-directory: /workspace/frety-v2-front
          command: |
            echo "Deploying Docker Compose with TAG=${{ needs.tag.outputs.tag_name }}";
            sudo TAG=${{ needs.tag.outputs.tag_name }} docker compose up -d
